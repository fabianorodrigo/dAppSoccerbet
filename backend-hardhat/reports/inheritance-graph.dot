digraph "" {
Ownable -> Context;
Ownable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Ownable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

ERC20 -> Context [ label="1" ];
ERC20 -> IERC20 [ label="2" ];
ERC20 -> IERC20Metadata [ label="3" ];
ERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _spendAllowance(address,address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left">    _afterTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

IERC20Metadata -> IERC20;
IERC20Metadata[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Metadata</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

Strings[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Strings</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _HEX_SYMBOLS</TD></TR></TABLE> >];

BetToken -> ERC20 [ label="1" ];
BetToken -> Ownable [ label="2" ];
BetToken[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>BetToken</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    receive()</TD></TR><TR><TD align="left">    destroyContract()</TD></TR></TABLE> >];

Calculator[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Calculator</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    calcPercentage(uint256,uint256)</TD></TR><TR><TD align="left">    mulDiv(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    fullMul(uint256,uint256)</TD></TR></TABLE> >];

Game -> Ownable;
Game[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Game</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    openForBetting()</TD></TR><TR><TD align="left">    bet(Score,uint256)</TD></TR><TR><TD align="left">    closeForBetting()</TD></TR><TR><TD align="left">    finalizeGame(Score)</TD></TR><TR><TD align="left">    listBets()</TD></TR><TR><TD align="left">    getTotalStake()</TD></TR><TR><TD align="left">    getCommissionValue()</TD></TR><TR><TD align="left">    getPrize()</TD></TR><TR><TD align="left">    destroyContract()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    payPrizes()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    WINNING</TD></TR><TR><TD align="left">    LOSS</TD></TR><TR><TD align="left">    NO_RESULT</TD></TR><TR><TD align="left">    open</TD></TR><TR><TD align="left">    homeTeam</TD></TR><TR><TD align="left">    visitorTeam</TD></TR><TR><TD align="left">    datetimeGame</TD></TR><TR><TD align="left">    finalScore</TD></TR><TR><TD align="left">    finalized</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _betTokenContract<font color="blue" POINT-SIZE="10"> (BetToken)</font></TD></TR><TR><TD align="left">    _calculator<font color="blue" POINT-SIZE="10"> (Calculator)</font></TD></TR><TR><TD align="left">    commission</TD></TR><TR><TD align="left">    _bets</TD></TR><TR><TD align="left">    _totalStake</TD></TR></TABLE> >];

GameFactory -> Ownable;
GameFactory[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>GameFactory</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    newGame(string,string,uint256)</TD></TR><TR><TD align="left">    getCommission()</TD></TR><TR><TD align="left">    setCommission(uint256)</TD></TR><TR><TD align="left">    listGames()</TD></TR><TR><TD align="left">    destroyContract()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    betTokenContractAddress</TD></TR><TR><TD align="left">    calculatorContractAddress</TD></TR><TR><TD align="left">    _games</TD></TR><TR><TD align="left">    commission</TD></TR></TABLE> >];

TestingAuxiliar -> Ownable;
TestingAuxiliar[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>TestingAuxiliar</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    destroyContract()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    selfDestructRecipient</TD></TR></TABLE> >];

StringUtils[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>StringUtils</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    concat(string,string)</TD></TR><TR><TD align="left">    concatSpaced(string,string)</TD></TR><TR><TD align="left">    toASCIIString(address)</TD></TR><TR><TD align="left">    char(bytes1)</TD></TR></TABLE> >];

Utils[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Utils</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isAliveContract(address)</TD></TR></TABLE> >];

}